{"version":3,"sources":["../../../src/reporters/http_sender.js"],"names":["URL","DEFAULT_PATH","DEFAULT_PORT","DEFAULT_TIMEOUT_MS","DEFAULT_MAX_SPAN_BATCH_SIZE","HTTPSender","options","_url","parse","endpoint","_username","username","_password","password","_timeoutMS","timeoutMS","_httpAgent","protocol","https","Agent","keepAlive","http","_maxSpanBatchSize","maxSpanBatchSize","_logger","logger","NullLogger","_jaegerThrift","Thrift","source","allowOptionalArguments","_httpOptions","hostname","port","path","pathname","method","auth","undefined","headers","Connection","agent","timeout","process","_batch","Batch","SenderUtils","convertProcessToThrift","spans","span","callback","push","Span","length","flush","invokeCallback","numSpans","result","rw","toBuffer","_reset","err","requester","request","req","resp","resume","on","error","write","value","end","destroy"],"mappings":"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","file":"http_sender.js","sourcesContent":["// @flow\n// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport fs from 'fs';\nimport http from 'http';\nimport https from 'https';\nimport path from 'path';\nimport * as URL from 'url';\nimport { Thrift } from 'thriftrw';\n\nimport NullLogger from '../logger.js';\nimport SenderUtils from './sender_utils.js';\n\nconst DEFAULT_PATH = '/api/traces';\nconst DEFAULT_PORT = 14268;\nconst DEFAULT_TIMEOUT_MS = 5000;\nconst DEFAULT_MAX_SPAN_BATCH_SIZE = 100;\n\nexport default class HTTPSender {\n  _url: Object;\n  _username: string;\n  _password: string;\n  _emitSpanBatchOverhead: number;\n  _timeoutMS: number;\n  _httpAgent: http$Agent;\n  _logger: Logger;\n  _jaegerThrift: Thrift;\n  _process: Process;\n  _batch: Batch;\n  _thriftProcessMessage: any;\n  _maxSpanBatchSize: number;\n  _httpOptions: Object;\n\n  constructor(options: any = {}) {\n    this._url = URL.parse(options.endpoint);\n    this._username = options.username;\n    this._password = options.password;\n    this._timeoutMS = options.timeoutMS || DEFAULT_TIMEOUT_MS;\n    this._httpAgent =\n      this._url.protocol === 'https:'\n        ? new https.Agent({ keepAlive: true })\n        : new http.Agent({ keepAlive: true });\n\n    this._maxSpanBatchSize = options.maxSpanBatchSize || DEFAULT_MAX_SPAN_BATCH_SIZE;\n\n    this._logger = options.logger || new NullLogger();\n    this._jaegerThrift = new Thrift({\n      source: '# Copyright (c) 2016 Uber Technologies, Inc.\\n' +\n        '#\\n' +\n        '# Permission is hereby granted, free of charge, to any person obtaining a copy\\n' +\n        '# of this software and associated documentation files (the \"Software\"), to deal\\n' +\n        '# in the Software without restriction, including without limitation the rights\\n' +\n        '# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n' +\n        '# copies of the Software, and to permit persons to whom the Software is\\n' +\n        '# furnished to do so, subject to the following conditions:\\n' +\n        '#\\n' +\n        '# The above copyright notice and this permission notice shall be included in\\n' +\n        '# all copies or substantial portions of the Software.\\n' +\n        '#\\n' +\n        '# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' +\n        '# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' +\n        '# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' +\n        '# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' +\n        '# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' +\n        '# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n' +\n        '# THE SOFTWARE.\\n' +\n        '\\n' +\n        'namespace java com.uber.jaeger.thriftjava\\n' +\n        '\\n' +\n        '# TagType denotes the type of a Tag\\'s value.\\n' +\n        'enum TagType { STRING, DOUBLE, BOOL, LONG, BINARY }\\n' +\n        '\\n' +\n        '# Tag is a basic strongly typed key/value pair. It has been flattened to reduce the use of pointers in golang\\n' +\n        'struct Tag {\\n' +\n        '  1: required string  key\\n' +\n        '  2: required TagType vType\\n' +\n        '  3: optional string  vStr\\n' +\n        '  4: optional double  vDouble\\n' +\n        '  5: optional bool    vBool\\n' +\n        '  6: optional i64     vLong\\n' +\n        '  7: optional binary  vBinary\\n' +\n        '}\\n' +\n        '\\n' +\n        '# Log is a timed even with an arbitrary set of tags.\\n' +\n        'struct Log {\\n' +\n        '  1: required i64       timestamp\\n' +\n        '  2: required list<Tag> fields\\n' +\n        '}\\n' +\n        '\\n' +\n        'enum SpanRefType { CHILD_OF, FOLLOWS_FROM }\\n' +\n        '\\n' +\n        '# SpanRef describes causal relationship of the current span to another span (e.g. \\'child-of\\')\\n' +\n        'struct SpanRef {\\n' +\n        '  1: required SpanRefType refType\\n' +\n        '  2: required i64         traceIdLow\\n' +\n        '  3: required i64         traceIdHigh\\n' +\n        '  4: required i64         spanId\\n' +\n        '}\\n' +\n        '\\n' +\n        '# Span represents a named unit of work performed by a service.\\n' +\n        'struct Span {\\n' +\n        '  1:  required i64           traceIdLow   # the least significant 64 bits of a traceID\\n' +\n        '  2:  required i64           traceIdHigh  # the most significant 64 bits of a traceID; 0 when only 64bit IDs are used\\n' +\n        '  3:  required i64           spanId       # unique span id (only unique within a given trace)\\n' +\n        '  4:  required i64           parentSpanId # since nearly all spans will have parents spans, CHILD_OF refs do not have to be explicit\\n' +\n        '  5:  required string        operationName\\n' +\n        '  6:  optional list<SpanRef> references   # causal references to other spans\\n' +\n        '  7:  required i32           flags        # a bit field used to propagate sampling decisions. 1 signifies a SAMPLED span, 2 signifies a DEBUG span.\\n' +\n        '  8:  required i64           startTime\\n' +\n        '  9:  required i64           duration\\n' +\n        '  10: optional list<Tag>     tags\\n' +\n        '  11: optional list<Log>     logs\\n' +\n        '}\\n' +\n        '\\n' +\n        '# Process describes the traced process/service that emits spans.\\n' +\n        'struct Process {\\n' +\n        '  1: required string    serviceName\\n' +\n        '  2: optional list<Tag> tags\\n' +\n        '}\\n' +\n        '\\n' +\n        '# Batch is a collection of spans reported out of process.\\n' +\n        'struct Batch {\\n' +\n        '  1: required Process    process\\n' +\n        '  2: required list<Span> spans\\n' +\n        '}\\n' +\n        '\\n' +\n        '# BatchSubmitResponse is the response on submitting a batch. \\n' +\n        'struct BatchSubmitResponse {\\n' +\n        '    1: required bool ok   # The Collector\\'s client is expected to only log (or emit a counter) when not ok equals false\\n' +\n        '}\\n' +\n        '\\n' +\n        'service Collector  {\\n' +\n        '    list<BatchSubmitResponse> submitBatches(1: list<Batch> batches)\\n' +\n        '}\\n',\n      allowOptionalArguments: true,\n    });\n\n    this._httpOptions = {\n      protocol: this._url.protocol,\n      hostname: this._url.hostname,\n      port: this._url.port,\n      path: this._url.pathname,\n      method: 'POST',\n      auth: this._username && this._password ? `${this._username}:${this._password}` : undefined,\n      headers: {\n        'Content-Type': 'application/x-thrift',\n        Connection: 'keep-alive',\n      },\n      agent: this._httpAgent,\n      timeout: this._timeoutMS,\n    };\n  }\n\n  setProcess(process: Process): void {\n    // Go ahead and initialize the Thrift batch that we will reuse for each\n    // flush.\n    this._batch = new this._jaegerThrift.Batch({\n      process: SenderUtils.convertProcessToThrift(this._jaegerThrift, process),\n      spans: [],\n    });\n  }\n\n  append(span: any, callback?: SenderCallback): void {\n    this._batch.spans.push(new this._jaegerThrift.Span(span));\n\n    if (this._batch.spans.length >= this._maxSpanBatchSize) {\n      this.flush(callback);\n      return;\n    }\n    SenderUtils.invokeCallback(callback, 0);\n  }\n\n  flush(callback?: SenderCallback): void {\n    const numSpans = this._batch.spans.length;\n    if (!numSpans) {\n      SenderUtils.invokeCallback(callback, 0);\n      return;\n    }\n\n    const result = this._jaegerThrift.Batch.rw.toBuffer(this._batch);\n    this._reset(); // clear buffer for new spans, even if Thrift conversion fails\n\n    if (result.err) {\n      SenderUtils.invokeCallback(callback, numSpans, `Error encoding Thrift batch: ${result.err}`);\n      return;\n    }\n\n    const requester = this._url.protocol === 'https:' ? https.request : http.request;\n\n    const req = requester(this._httpOptions, resp => {\n      // consume response data to free up memory\n      resp.resume();\n      SenderUtils.invokeCallback(callback, numSpans);\n    });\n\n    req.on('error', err => {\n      const error: string = `error sending spans over HTTP: ${err}`;\n      this._logger.error(error);\n      SenderUtils.invokeCallback(callback, numSpans, error);\n    });\n    req.write(result.value);\n    req.end();\n  }\n\n  _reset() {\n    this._batch.spans = [];\n  }\n\n  close(): void {\n    // Older node versions don't have this.\n    if (this._httpAgent.destroy) {\n      this._httpAgent.destroy();\n    }\n  }\n}\n"]}