{"version":3,"sources":["../../src/thrift.js"],"names":["opentracing","ThriftUtils","initialTags","thriftTags","i","length","tag","key","vLong","emptyBuffer","vBinary","vBool","vDouble","vStr","vType","valueType","value","_thrift","TagType","DOUBLE","BOOL","Buffer","BINARY","STRING","JSON","stringify","String","push","logs","thriftLogs","log","timestamp","Utils","encodeInt64","fields","getThriftTags","refs","thriftRefs","refEnum","ref","context","referencedContext","type","REFERENCE_CHILD_OF","SpanRefType","CHILD_OF","REFERENCE_FOLLOWS_FROM","FOLLOWS_FROM","refType","traceIdLow","getTraceIdLow","traceId","traceIdHigh","getTraceIdHigh","spanId","slice","span","tags","_tags","getThriftLogs","_logs","unsigned","_spanContext","parentSpanId","parentId","operationName","_operationName","references","spanRefsToThriftRefs","_references","flags","startTime","_startTime","duration","_duration","Thrift","source","allowOptionalArguments","newBuffer"],"mappings":"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","file":"thrift.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as opentracing from 'opentracing';\nimport { Thrift } from 'thriftrw';\nimport Utils from './util.js';\n\nexport default class ThriftUtils {\n  static _thrift = new Thrift({\n    source: '# Copyright (c) 2016 Uber Technologies, Inc.\\n' +\n      '#\\n' +\n      '# Permission is hereby granted, free of charge, to any person obtaining a copy\\n' +\n      '# of this software and associated documentation files (the \"Software\"), to deal\\n' +\n      '# in the Software without restriction, including without limitation the rights\\n' +\n      '# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n' +\n      '# copies of the Software, and to permit persons to whom the Software is\\n' +\n      '# furnished to do so, subject to the following conditions:\\n' +\n      '#\\n' +\n      '# The above copyright notice and this permission notice shall be included in\\n' +\n      '# all copies or substantial portions of the Software.\\n' +\n      '#\\n' +\n      '# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' +\n      '# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' +\n      '# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' +\n      '# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' +\n      '# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' +\n      '# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n' +\n      '# THE SOFTWARE.\\n' +\n      '\\n' +\n      'namespace java com.uber.jaeger.thriftjava\\n' +\n      '\\n' +\n      '# TagType denotes the type of a Tag\\'s value.\\n' +\n      'enum TagType { STRING, DOUBLE, BOOL, LONG, BINARY }\\n' +\n      '\\n' +\n      '# Tag is a basic strongly typed key/value pair. It has been flattened to reduce the use of pointers in golang\\n' +\n      'struct Tag {\\n' +\n      '  1: required string  key\\n' +\n      '  2: required TagType vType\\n' +\n      '  3: optional string  vStr\\n' +\n      '  4: optional double  vDouble\\n' +\n      '  5: optional bool    vBool\\n' +\n      '  6: optional i64     vLong\\n' +\n      '  7: optional binary  vBinary\\n' +\n      '}\\n' +\n      '\\n' +\n      '# Log is a timed even with an arbitrary set of tags.\\n' +\n      'struct Log {\\n' +\n      '  1: required i64       timestamp\\n' +\n      '  2: required list<Tag> fields\\n' +\n      '}\\n' +\n      '\\n' +\n      'enum SpanRefType { CHILD_OF, FOLLOWS_FROM }\\n' +\n      '\\n' +\n      '# SpanRef describes causal relationship of the current span to another span (e.g. \\'child-of\\')\\n' +\n      'struct SpanRef {\\n' +\n      '  1: required SpanRefType refType\\n' +\n      '  2: required i64         traceIdLow\\n' +\n      '  3: required i64         traceIdHigh\\n' +\n      '  4: required i64         spanId\\n' +\n      '}\\n' +\n      '\\n' +\n      '# Span represents a named unit of work performed by a service.\\n' +\n      'struct Span {\\n' +\n      '  1:  required i64           traceIdLow   # the least significant 64 bits of a traceID\\n' +\n      '  2:  required i64           traceIdHigh  # the most significant 64 bits of a traceID; 0 when only 64bit IDs are used\\n' +\n      '  3:  required i64           spanId       # unique span id (only unique within a given trace)\\n' +\n      '  4:  required i64           parentSpanId # since nearly all spans will have parents spans, CHILD_OF refs do not have to be explicit\\n' +\n      '  5:  required string        operationName\\n' +\n      '  6:  optional list<SpanRef> references   # causal references to other spans\\n' +\n      '  7:  required i32           flags        # a bit field used to propagate sampling decisions. 1 signifies a SAMPLED span, 2 signifies a DEBUG span.\\n' +\n      '  8:  required i64           startTime\\n' +\n      '  9:  required i64           duration\\n' +\n      '  10: optional list<Tag>     tags\\n' +\n      '  11: optional list<Log>     logs\\n' +\n      '}\\n' +\n      '\\n' +\n      '# Process describes the traced process/service that emits spans.\\n' +\n      'struct Process {\\n' +\n      '  1: required string    serviceName\\n' +\n      '  2: optional list<Tag> tags\\n' +\n      '}\\n' +\n      '\\n' +\n      '# Batch is a collection of spans reported out of process.\\n' +\n      'struct Batch {\\n' +\n      '  1: required Process    process\\n' +\n      '  2: required list<Span> spans\\n' +\n      '}\\n' +\n      '\\n' +\n      '# BatchSubmitResponse is the response on submitting a batch. \\n' +\n      'struct BatchSubmitResponse {\\n' +\n      '    1: required bool ok   # The Collector\\'s client is expected to only log (or emit a counter) when not ok equals false\\n' +\n      '}\\n' +\n      '\\n' +\n      'service Collector  {\\n' +\n      '    list<BatchSubmitResponse> submitBatches(1: list<Batch> batches)\\n' +\n      '}\\n',\n    allowOptionalArguments: true,\n  });\n  static emptyBuffer: Buffer = Utils.newBuffer(8);\n\n  static getThriftTags(initialTags: Array<Tag>): Array<any> {\n    let thriftTags = [];\n    for (let i = 0; i < initialTags.length; i++) {\n      let tag = initialTags[i];\n\n      let key: string = tag.key;\n\n      let vLong: Buffer = ThriftUtils.emptyBuffer;\n      let vBinary: Buffer = ThriftUtils.emptyBuffer;\n      let vBool: boolean = false;\n      let vDouble: number = 0;\n      let vStr: string = '';\n\n      let vType: string = '';\n      let valueType = typeof tag.value;\n      if (valueType === 'number') {\n        vType = ThriftUtils._thrift.TagType.DOUBLE;\n        vDouble = tag.value;\n      } else if (valueType === 'boolean') {\n        vType = ThriftUtils._thrift.TagType.BOOL;\n        vBool = tag.value;\n      } else if (tag.value instanceof Buffer) {\n        vType = ThriftUtils._thrift.TagType.BINARY;\n        vBinary = tag.value;\n      } else if (valueType === 'object') {\n        vType = ThriftUtils._thrift.TagType.STRING;\n        vStr = JSON.stringify(tag.value);\n      } else {\n        vType = ThriftUtils._thrift.TagType.STRING;\n        if (valueType === 'string') {\n          vStr = tag.value;\n        } else {\n          vStr = String(tag.value);\n        }\n      }\n\n      thriftTags.push({\n        key: key,\n        vType: vType,\n        vStr: vStr,\n        vDouble: vDouble,\n        vBool: vBool,\n        vLong: vLong,\n        vBinary: vBinary,\n      });\n    }\n\n    return thriftTags;\n  }\n\n  static getThriftLogs(logs: Array<LogData>): Array<any> {\n    let thriftLogs = [];\n    for (let i = 0; i < logs.length; i++) {\n      let log = logs[i];\n      thriftLogs.push({\n        timestamp: Utils.encodeInt64(log.timestamp * 1000), // to microseconds\n        fields: ThriftUtils.getThriftTags(log.fields),\n      });\n    }\n\n    return thriftLogs;\n  }\n\n  static spanRefsToThriftRefs(refs: Array<Reference>): Array<any> {\n    let thriftRefs = [];\n    for (let i = 0; i < refs.length; i++) {\n      let refEnum;\n      let ref = refs[i];\n      let context = refs[i].referencedContext();\n\n      if (ref.type() === opentracing.REFERENCE_CHILD_OF) {\n        refEnum = ThriftUtils._thrift.SpanRefType.CHILD_OF;\n      } else if (ref.type() === opentracing.REFERENCE_FOLLOWS_FROM) {\n        refEnum = ThriftUtils._thrift.SpanRefType.FOLLOWS_FROM;\n      } else {\n        continue;\n      }\n\n      thriftRefs.push({\n        refType: refEnum,\n        traceIdLow: ThriftUtils.getTraceIdLow(context.traceId),\n        traceIdHigh: ThriftUtils.getTraceIdHigh(context.traceId),\n        spanId: context.spanId,\n      });\n    }\n\n    return thriftRefs;\n  }\n\n  static getTraceIdLow(traceId: Buffer) {\n    if (traceId != null) {\n      return traceId.slice(-8);\n    }\n\n    return ThriftUtils.emptyBuffer;\n  }\n\n  static getTraceIdHigh(traceId: Buffer) {\n    if (traceId != null && traceId.length > 8) {\n      return traceId.slice(-16, -8);\n    }\n\n    return ThriftUtils.emptyBuffer;\n  }\n\n  static spanToThrift(span: Span): any {\n    let tags = ThriftUtils.getThriftTags(span._tags);\n    let logs = ThriftUtils.getThriftLogs(span._logs);\n    let unsigned = true;\n\n    return {\n      traceIdLow: ThriftUtils.getTraceIdLow(span._spanContext.traceId),\n      traceIdHigh: ThriftUtils.getTraceIdHigh(span._spanContext.traceId),\n      spanId: span._spanContext.spanId,\n      parentSpanId: span._spanContext.parentId || ThriftUtils.emptyBuffer,\n      operationName: span._operationName,\n      references: ThriftUtils.spanRefsToThriftRefs(span._references),\n      flags: span._spanContext.flags,\n      startTime: Utils.encodeInt64(span._startTime * 1000), // to microseconds\n      duration: Utils.encodeInt64(span._duration * 1000), // to microseconds\n      tags: tags,\n      logs: logs,\n    };\n  }\n}\n"]}